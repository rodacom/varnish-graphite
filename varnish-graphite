#!/usr/bin/env python
#
# Author: Scott Sanders <scott@jssjr.com>
#
# Collect statistics from Varnish, format them, and send them to Graphite.

import argparse
import json
import logging
import socket
#from subprocess import check_output
from subprocess import Popen, PIPE
import re
import sys
from time import time, sleep
from os import fork, devnull

class GraphiteClient:

  def __init__(self, host='127.0.0.1', port=2003, prefix='varnish', buffer_size=1428, max_buffer_size=33554432):
    self.prefix = prefix
    self.host = host
    self.port = port
    self.sock = None

    self.sendbuf = ''
    self.buffer_size = buffer_size
    self.max_buffer_size = max_buffer_size

    self.connect()

  def connect(self):
    if self.sock == None:
      try:
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
      except socket.error:
        self.sock = None
        logging.warning("Connection failed. Re-trying on the next interval")
      try:
        self.sock.connect((self.host, int(self.port)))
      except socket.error:
        self.sock.close()
        self.sock = None
        logging.warning("Connection failed. Re-trying on the next interval")
    if self.sock != None:
      logging.info("Connected to {0}:{1}".format(self.host, self.port))

  def send_metrics(self, metrics):
    if self.sock == None:
      self.connect()
    for stat in metrics:
      if self.sock != None and len(self.sendbuf) + len("{0}.{1}".format(self.prefix, stat)) > self.buffer_size:
        logging.info("Sending {0} bytes to {1}".format(len(self.sendbuf), "{0}:{1}".format(self.host, self.port)))
        try:
          self.sock.send(self.sendbuf)
          self.sendbuf = ''
        except socket.error:
          logging.warning("Lost connection to {0}:{1}".format(self.host, self.port))
          self.reconnect()
      if len(self.sendbuf) + len("{0}.{1}".format(self.prefix, stat)) < int(self.max_buffer_size):
        self.sendbuf += "{0}.{1}\n".format(self.prefix, stat)

  def disconnect(self):
    if self.sock != None:
      self.sock.close()
    self.sock = None
    logging.warning("Disconnected from {0}:{1}".format(self.host, self.port))

  def reconnect(self):
    self.disconnect()
    self.connect()

def collect_metrics(name):
  #varnish_stats = json.loads(check_output(['varnishstat', '-n', name, '-1', '-j']))
  # Python 2.6 workaround for RHEL6
  varnish_stats = json.loads(Popen(['varnishstat', '-n', name, '-1', '-j'], stdout=PIPE).communicate()[0])
  timestamp = int(time())

  status = []
  fmt = lambda x, y: "{0} {1} {2}".format(x, varnish_stats[y]['value'], timestamp)

  metrics = [('cache.hit', 'MAIN.cache_hit'),
             ('cache.hitpass', 'MAIN.cache_hitpass'),
             ('cache.miss', 'MAIN.cache_miss'),
             ('backend.conn', 'MAIN.backend_conn'),
             ('backend.unhealthy', 'MAIN.backend_unhealthy'),
             ('backend.busy', 'MAIN.backend_busy'),
             ('backend.fail', 'MAIN.backend_fail'),
             ('backend.reuse', 'MAIN.backend_reuse'),
             ('backend.toolate', 'MAIN.backend_toolate'),
             ('backend.recycle', 'MAIN.backend_recycle'),
             ('backend.retry', 'MAIN.backend_retry'),
             ('backend.req', 'MAIN.backend_req'),
             ('client.conn', 'MAIN.sess_conn'),
             ('client.drop', 'MAIN.sess_drop'),
             ('client.req', 'MAIN.client_req'),
             ('client.req_hdrbytes', 'MAIN.s_req_hdrbytes'),
             ('client.req_bodybytes', 'MAIN.s_req_bodybytes'),
             ('client.resp_hdrbytes', 'MAIN.s_resp_hdrbytes'),
             ('client.resp_bodybytes', 'MAIN.s_resp_bodybytes')]

  for (name, metric) in metrics:
    status.append(fmt(name, metric))

  return status


def main():
  parser = argparse.ArgumentParser(
      description='Collect and stream Varnish statistics to Graphite.',
      formatter_class=argparse.ArgumentDefaultsHelpFormatter)

  parser.add_argument('-H', '--host',
      default='127.0.0.1',
      help='The graphite server host')
  parser.add_argument('-p', '--port',
      default=2003,
      help='The graphite server port')
  parser.add_argument('-n', '--name',
      default=socket.gethostname(),
      help="""Specifies the name of the varnishd instance to get logs from. If
           -n is not specified, the host name is used.""")
  parser.add_argument('-P', '--prefix',
      default='varnish',
      help='The prefix for metric names')
  parser.add_argument('-i', '--interval',
      default=10,
      help='The collection interval in seconds')
  # Ethernet - (IPv6 + TCP) = 1500 - (40 + 32) = 1428
  parser.add_argument('-b', '--buffer-size', dest='buffer_size',
      default=1428,
      help='The number of bytes to send each time')
  # Default 32M max buffer size. Discard anything extra if we aren't able to send.
  parser.add_argument('-B', '--max-buffer-size', dest='max_buffer_size',
      default=33554432,
      help='The maximum number of bytes to buffer when reconnecting')
  parser.add_argument('-d', '--demonize',
      default=False,
      metavar='PIDFILE',
      help='Fork to the background and store pid in PIDFILE')

  args = parser.parse_args()

  if args.demonize: # FIXME: Clean this up a bit
    pid = fork()

    if pid != 0:
      print("demon pid: {0}".format(pid))
      open(args.demonize, 'w+').write(str(pid))
      exit()
    else:
      sys.stdout = open(devnull, 'w')

  logging.basicConfig(level=logging.INFO)

  try:
    c = GraphiteClient(args.host, args.port, args.prefix, args.buffer_size, args.max_buffer_size)
    while True:
      interval_start = time()

      c.send_metrics(collect_metrics(args.name))

      interval_used = time() - interval_start
      if interval_used < float(args.interval):
        sleep(float(args.interval) - interval_used)
  except KeyboardInterrupt:
    c.disconnect();

if __name__ == "__main__":
  main()
